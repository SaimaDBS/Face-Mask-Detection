# -*- coding: utf-8 -*-
"""CNN Face Mask Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1t5PW23xPxSvCLrfNR28JuPYuRpBoG-WF
"""

!pip install tensorflowjs

"""Commenting by Jawad Ahmed
Bscs201959

Mount google drive
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

"""Make the training dataset and give the path of file in the drive"""

trainingDataset = []
classNumber = 0
img_size = 100
path = "/content/drive/MyDrive/dataset"

"""Import the required libraries"""

import cv2
import numpy as np
import os
import tensorflowjs as tfjs

"""Read the images from the drive. Also give it a class name like 0, 1 etc. And append it in the training dataset."""

trainingDataset.clear()
for folder in (os.listdir(path)):
  print(classNumber)
  fp = os.path.join(path,folder)
  for eachImage in os.listdir(fp):
    imagePath = os.path.join(fp,eachImage)
    img = (cv2.imread(imagePath,cv2.IMREAD_GRAYSCALE))/255
    img = cv2.resize(img, (img_size, img_size))
    img= img.astype(int)
    trainingDataset.append([img,classNumber])
  classNumber = classNumber + 1

print(len(trainingDataset))
print(len(trainingDataset[0]))
print(trainingDataset[0])

"""Import all tensorflow"""

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, Activation, Flatten
from tensorflow.keras.layers import Conv2D, MaxPooling2D
from tensorflow.keras.callbacks import TensorBoard
from tensorflow.keras.utils import to_categorical
import pickle
import time

"""Randomized the training dataset because CNN work effectively in random cases. Also separate the feature and label"""

X = []
Y = []
img_size = 100
np.random.shuffle(trainingDataset)
for features, label in trainingDataset:
    X.append(features)
    Y.append(label)
print(Y)

"""Reshape the X train and make the classes categorical representation."""

X = np.array(X).reshape(-1, img_size, img_size, 1)
Y_binary = to_categorical(Y)
print(Y_binary)

"""Prepare the model according to the requirements. Use the model sequentially."""

model = Sequential()

model.add(Conv2D(40, (2, 2), input_shape=(100,100,1)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.3))

model.add(Conv2D(60, (2, 2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.3))

model.add(Conv2D(80, (2, 2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.3))

model.add(Flatten())

model.add(Dense(100))
model.add(Activation('relu'))
 
model.add(Dense(2))
model.add(Activation('softmax'))

"""Make the model compiled"""

model.compile(loss='categorical_crossentropy',
              optimizer='adam',
              metrics=['accuracy'],
              )

"""Pass the X train and y train dataset to the model using fit function. Also keep the epochs 20 for better result and training"""

model.fit(X, Y_binary,
          batch_size = 50,
          epochs=20, validation_split = 0.2)
 
# model.save("/content/drive/MyDrive/{NAME}.model")

"""Prepare the given file that we want to predicts."""

def prepare(filepath):
    img_size = 100 
    img = cv2.imread(filepath, cv2.IMREAD_GRAYSCALE)/255  
    img_resize = cv2.resize(img, (img_size, img_size))  
    return img_resize.reshape(-1, img_size, img_size, 1)

"""Predict the result by passing an image without mask so it give 73 percent prediction which is quite good."""

prediction = model.predict(prepare("/content/drive/MyDrive/Mask Test/0.jpg"))
print((prediction))

CATEGORIES = ["With Mask", "Without Mask"]

pred_class = CATEGORIES[np.argmax(prediction)]
print(pred_class)